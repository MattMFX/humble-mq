// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: channel.proto

package humble_mq_go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreateChannel_CreateChannel_FullMethodName = "/CreateChannel/CreateChannel"
)

// CreateChannelClient is the client API for CreateChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateChannelClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
}

type createChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateChannelClient(cc grpc.ClientConnInterface) CreateChannelClient {
	return &createChannelClient{cc}
}

func (c *createChannelClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, CreateChannel_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateChannelServer is the server API for CreateChannel service.
// All implementations must embed UnimplementedCreateChannelServer
// for forward compatibility.
type CreateChannelServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	mustEmbedUnimplementedCreateChannelServer()
}

// UnimplementedCreateChannelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreateChannelServer struct{}

func (UnimplementedCreateChannelServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedCreateChannelServer) mustEmbedUnimplementedCreateChannelServer() {}
func (UnimplementedCreateChannelServer) testEmbeddedByValue()                       {}

// UnsafeCreateChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateChannelServer will
// result in compilation errors.
type UnsafeCreateChannelServer interface {
	mustEmbedUnimplementedCreateChannelServer()
}

func RegisterCreateChannelServer(s grpc.ServiceRegistrar, srv CreateChannelServer) {
	// If the following call pancis, it indicates UnimplementedCreateChannelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreateChannel_ServiceDesc, srv)
}

func _CreateChannel_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateChannelServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateChannel_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateChannelServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateChannel_ServiceDesc is the grpc.ServiceDesc for CreateChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CreateChannel",
	HandlerType: (*CreateChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _CreateChannel_CreateChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel.proto",
}

const (
	DeleteChannel_DeleteChannel_FullMethodName = "/DeleteChannel/DeleteChannel"
)

// DeleteChannelClient is the client API for DeleteChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteChannelClient interface {
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
}

type deleteChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteChannelClient(cc grpc.ClientConnInterface) DeleteChannelClient {
	return &deleteChannelClient{cc}
}

func (c *deleteChannelClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, DeleteChannel_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteChannelServer is the server API for DeleteChannel service.
// All implementations must embed UnimplementedDeleteChannelServer
// for forward compatibility.
type DeleteChannelServer interface {
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	mustEmbedUnimplementedDeleteChannelServer()
}

// UnimplementedDeleteChannelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeleteChannelServer struct{}

func (UnimplementedDeleteChannelServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedDeleteChannelServer) mustEmbedUnimplementedDeleteChannelServer() {}
func (UnimplementedDeleteChannelServer) testEmbeddedByValue()                       {}

// UnsafeDeleteChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteChannelServer will
// result in compilation errors.
type UnsafeDeleteChannelServer interface {
	mustEmbedUnimplementedDeleteChannelServer()
}

func RegisterDeleteChannelServer(s grpc.ServiceRegistrar, srv DeleteChannelServer) {
	// If the following call pancis, it indicates UnimplementedDeleteChannelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeleteChannel_ServiceDesc, srv)
}

func _DeleteChannel_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteChannelServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteChannel_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteChannelServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteChannel_ServiceDesc is the grpc.ServiceDesc for DeleteChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeleteChannel",
	HandlerType: (*DeleteChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteChannel",
			Handler:    _DeleteChannel_DeleteChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel.proto",
}

const (
	ListChannel_ListChannel_FullMethodName = "/ListChannel/ListChannel"
)

// ListChannelClient is the client API for ListChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListChannelClient interface {
	ListChannel(ctx context.Context, in *ListChannelRequest, opts ...grpc.CallOption) (*ListChannelResponse, error)
}

type listChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewListChannelClient(cc grpc.ClientConnInterface) ListChannelClient {
	return &listChannelClient{cc}
}

func (c *listChannelClient) ListChannel(ctx context.Context, in *ListChannelRequest, opts ...grpc.CallOption) (*ListChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelResponse)
	err := c.cc.Invoke(ctx, ListChannel_ListChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListChannelServer is the server API for ListChannel service.
// All implementations must embed UnimplementedListChannelServer
// for forward compatibility.
type ListChannelServer interface {
	ListChannel(context.Context, *ListChannelRequest) (*ListChannelResponse, error)
	mustEmbedUnimplementedListChannelServer()
}

// UnimplementedListChannelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListChannelServer struct{}

func (UnimplementedListChannelServer) ListChannel(context.Context, *ListChannelRequest) (*ListChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannel not implemented")
}
func (UnimplementedListChannelServer) mustEmbedUnimplementedListChannelServer() {}
func (UnimplementedListChannelServer) testEmbeddedByValue()                     {}

// UnsafeListChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListChannelServer will
// result in compilation errors.
type UnsafeListChannelServer interface {
	mustEmbedUnimplementedListChannelServer()
}

func RegisterListChannelServer(s grpc.ServiceRegistrar, srv ListChannelServer) {
	// If the following call pancis, it indicates UnimplementedListChannelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListChannel_ServiceDesc, srv)
}

func _ListChannel_ListChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListChannelServer).ListChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListChannel_ListChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListChannelServer).ListChannel(ctx, req.(*ListChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListChannel_ServiceDesc is the grpc.ServiceDesc for ListChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ListChannel",
	HandlerType: (*ListChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChannel",
			Handler:    _ListChannel_ListChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel.proto",
}
